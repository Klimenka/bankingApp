openapi: 3.0.0
info:
  title: Banking API
  version: 1.0.0
  description: Bankining api
  contact:
    email:
servers:
- description: This the is a simple REST API banking application
  url: https://localhost
  
paths:
  /Accounts:
    get:
      tags:
      - accounts 
      summary: get all accounts
      operationId: getAllAccounts
      description: Calling this will allow Employees to check data of all accounts
      responses:
        '200':
          description: the accounts data
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/CurrentAccount'
                    - $ref: '#/components/schemas/SavingAccount'
        '404':
          description: accounts are not found
        '400':
          description: bad request (error occured)
        '401':
          description: Not authenticated
    
    post:
      tags:
      - accounts 
      summary: create a bank account
      operationId: createBankAccount
      description: Calling this will allow epmployees to open an account for a specific customer
      requestBody:
        description: create a bank account
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
              
      responses:
        '201':
          description: the account has been created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          description: account has not been created
        '401':
          description: Not authenticated
  
  /Accounts/{userId}:
    get:
      tags:
      - accounts 
      summary: get user accounts
      operationId: getUserAccount
      description: Calling this will allow both customer and employee to check data of a specific account
      parameters:
      - in: path
        name: userId
        required: true
        description: the user id
        schema:
          type: integer
          format: Int64
          minimum: 1
      responses:
        '200':
          description: the account data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
                  
                anyOf: #to be discussed
                  - $ref: '#/components/schemas/CurrentAccount'
                  - $ref: '#/components/schemas/SavingAccount'
        '400':
          description: invalid user id 
        '404':
          description: account cannot be found
          
  /users:
    get:
      tags:
        - users
      parameters:
        - in: query
          name: userType
          schema:
            type: string
            enum: [Customer, Employee]
          required: false
      summary: get all users
      operationId: getUsers
      description: getting all users (employees and customers) by Employee
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter.
        '401':
          description: Authorization information is missing or invalid.
        '5XX':
          description: Unexpected error.
    post:
      tags:
        - users
      operationId: addUser
      description: Adds a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Customer'
              
                - $ref: '#/components/schemas/Employee'
      responses:
        '201':
          description: the user has been created.
        '400':
          description: Bad input parameter. The user has not been created.
        '401':
          description: Authorization information is missing or invalid. The user has not been created.
 
  /users/{userId}:
    get:
      tags:
        - users
      operationId: getUserById
      description: Gets a user by user ID
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to return
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: a user object
          content: 
            application/json: 
              schema: 
                oneOf:
                - $ref: '#/components/schemas/Customer'
              
                - $ref: '#/components/schemas/Employee'
    delete:
      tags:
        - users
      operationId: deleteUserById
      summary: Delete a user by user ID
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to delete
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: No content
        '400':
          description: bad input parameter.
        '401':
          description: Authorization information is missing or invalid.        
  /users/register:
    post:
      tags:
        - Register
      operationId: createNewUser
      summary: Add a new user
      requestBody:
        description: Adding a new user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Log'
          text/plain:
            schema:
              type: string
      responses:
        '201':
          description: Created
        "400":
          description: Unexpected error
          
  /users/login:
    post:
      tags:
        - Login
      operationId: createUserToken
      summary: Returns an auth token
      requestBody:
        description: Logs a user in and return an auth token, if the specified username and password are correct. 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Log'
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Token send
        "400":
          description: Unexpected error
        "404":
          description: User not found
  
  /users/{userId}/transaction:
    post: 
      tags: 
        - transaction
      operationId: createTransaction
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: Int64
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Transaction'
              required:
              - accountTo
              - accountFrom
      summary: Transfer money from a user to another user
      description: Transfers money from one user to another user.
      responses:
        '201':
          description: Transaction has successfully been send.
        '400':
          description: Transaction failed.
        '403':
          description: Insufficient balance.
    get:
      tags:
      - account
      summary: retrieves all transactions which has been made from a user's account.
      operationId: getTransactionHistory
      description: This function will retrieve the transaction acitivities of one account.
      parameters:
      - in: path
        name: userId
        required: true
        description: the user id
        schema:
          type: integer
          format: Int64
          minimum: 1
      responses:
        '200':
          description: Transaction history has succesfully been retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '400':
          description: Cannot retrieve the transaction history.
  /users/{id}/withdraw:
    post:
      tags:
      - withdraw
      operationId: withdrawMoney
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: Int64
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Transaction'
              required:
              - accountFrom
      summary: User can withdraw money
      description: User withdraws cash.
      responses:
        '201':
          description: Withdraw was a succes.
        '400':
          description: Withdraw has failed.
        '403':
          description: Insufficient balance.
  /users/{id}/deposit:
    post:
      tags:
      - deposit
      operationId: depositMoney
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: Int64
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Transaction'
              required:
              - accountTo
      summary: User can deposit money
      description: User deposits cash.
      responses:
        '201':
          description: Deposit was a succes.
        '400':
          description: Deposit has failed.
        '403':
          description: Insufficient balance.
        
components:
  schemas:
    User:
      type: object
      required:
        - id
        - officialName
        - dateOfBirth
        - primaryAddress
        - mobileNumber
        - emailAddress
        - commercialMessages
      properties:
        id:
          type: integer
        officialName:
          type: string
        preferedName:
          type: string
        sex:
          type: string
          enum: [male, female]
        dateOfBirth:
          type: string
        primaryAddress:
          $ref: '#/components/schemas/Address'
        postAddress:
          $ref: '#/components/schemas/Address'
        mobileNumber:
          type: string
        emailAddress:
          type: string
        commrcialMessages:
          type: string
          enum: [by post, by bankmail, by telephone, by email]
        preferedLanguage:
          type: string
          enum: 
            - Dutch 
            - English
        userType:
          anyOf:    
            - $ref: '#/components/schemas/Employee'
              
            - $ref: '#/components/schemas/Customer'
              
          
      discriminator: 
        propertyName: id
    Customer:
      allOf:    
        - $ref: '#/components/schemas/User'
          
            
    Employee:
      allOf:    
        - $ref: '#/components/schemas/User'
         
      properties:
        jobPosition:
          type: string
            
    Address:
      type: object
      properties:
        street:
          type: string
        houseNumber:
          type: integer
        postCode:
          type: string
        city:
          type: string
        country:
          type: string
          
    Account:
      type: object
      required:
        - dateOfOpening
        - userId
        - accountType
      properties:
        accountNumber:
          type: string
        balance:
          type: integer
        dateOfOpening:
          type: string
        userId:
          type: integer
        accountType: 
          type: string
          enum: ["current","saving"]
    CurrentAccount:
      allOf:
        - $ref: '#/components/schemas/Account'
    SavingAccount:
      allOf:
        - $ref: '#/components/schemas/Account'
      properties:
        interestRate:
          type: integer
          
    Log:
      type: object
      required:
        - userId
        - userName
        - password
      properties:
        userId:
          type: integer
       
    Transaction:
      type: object
      required:
      - transaction_id
      - amount
      - userPerforming
      - timestamp
      - transactionStatus
      properties:
        transaction_id:
          type: integer
        accountFrom:
          type: string
        accountTo:
          type: string
        amount:
          type: integer
          minimum: 1
          maximum: 10000
        userPerforming:
          type: string
          enum:
          - User
          - Employee
        timestamp:
          type: string
          format: date-time
        transactionStatus:
          type: string
          enum:
          - Pending
          - Succesful
          - Failed
