/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package nl.inholland.controller;

import nl.inholland.model.Transaction;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import java.time.LocalDate;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-02T11:27:08.122Z[GMT]")
@Api(value = "transactions", description = "the transactions API")
public interface TransactionsApi {

    @ApiOperation(value = "transfer/withdraw/deposit money", nickname = "createTransaction", notes = "Calling this will allow a user/employee to transfer/withdraw/deposit money", tags = {"transactions",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Transaction has successfully been send."),
            @ApiResponse(code = 400, message = "Bad request."),
            @ApiResponse(code = 403, message = "Insufficient balance.")})
    @RequestMapping(value = "/transactions",
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Object> createTransaction(@ApiParam(value = "") @Valid @RequestBody Transaction body);

    @ApiOperation(value = "retrieves all transactions which has been made from a user's account.", nickname = "getTransactionHistory", notes = "This function will retrieve the transaction acitivities of one account. The user will have the option to filter the transaction activities by using dates.", response = Transaction.class, responseContainer = "List", tags = {"transactions",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Transaction history has succesfully been retrieved.", response = Transaction.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Bad request.")})
    @RequestMapping(value = "/transactions",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getTransactionHistory(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "accountNumber", required = true) String accountNumber, @ApiParam(value = "") @Valid @RequestParam(value = "dateFrom", required = false) LocalDate dateFrom, @ApiParam(value = "") @Valid @RequestParam(value = "dateTo", required = false) LocalDate dateTo);

    @ApiOperation(value = "retrieves one transaction from the user", nickname = "getTransaction", notes = "This function will retrieve the transaction acitivities of one account by using the transaction Id.", response = Transaction.class, responseContainer = "Transaction", tags = {"getTransactions",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Transaction has succesfully been retrieved.", response = Transaction.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Bad request.")})
    @RequestMapping(value = "/getTransaction",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Transaction> getTransaction(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(name = "transactionId", required = true) long transactionId);

}
