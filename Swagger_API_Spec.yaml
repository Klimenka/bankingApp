openapi: 3.0.0
info:
  title: Banking API
  version: 1.0.0
  description: Bankining api
  contact:
    email: example@email.com
servers:
- description: This the is a simple REST API banking application
  url: https://localhost
  
paths:
  /users:
    get:
      tags:
        - users
      parameters:
        - in: query
          name: userType
          schema:
            type: string
            enum: [Customer, Employee]
          required: false
      summary: get all users
      operationId: getUsers
      description: getting all users (employees and customers) by Employee
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf: 
                    - $ref: '#/components/schemas/Customer'
                    - $ref: '#/components/schemas/Employee'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
          
      security:
      - api_key: []
      
    post:
      tags:
        - users
      operationId: addUser
      description: Adds a new user and returns it
      summary: Adds a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Customer'
                - $ref: '#/components/schemas/Employee'
      responses:
        '201':
          description: the user has been created.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Customer'
                  - $ref: '#/components/schemas/Employee'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
      
      security:
      - api_key: []
      
  /users/{userId}:
    get:
      tags:
        - users
      operationId: getUserById
      description: Gets a user by user ID
      summary: Gets a user by user ID
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: a user object
          content: 
            application/json: 
              schema: 
                oneOf:
                  - $ref: '#/components/schemas/Customer'
                  - $ref: '#/components/schemas/Employee'
    delete:
      tags:
        - users
      operationId: deleteUserById
      summary: Delete a user by user ID
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'       
      
      security:
      - api_key: []
      
  /users/login:
    post:
      tags:
        - users
      operationId: createUserToken
      summary: Returns an auth token
      requestBody:
        description: Logs a user in and return an auth token, if the specified username and password are correct. 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Token send
        '400': 
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /users/{userId}/account:
    put:
      tags:
        - users
      operationId: updateUserLogin
      summary: update the user's login info
      description: calling this will allow the user to change his/her credentials 
      parameters:
      - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '201':
          description: user credentials has successfully been updated
        '400': 
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /accounts:
    get:
      tags:
      - accounts 
      summary: get all bank accounts
      operationId: getBankAccounts
      description: Calling this will allow Employees to check data of all accounts or filter them by the date of opening Asc or Desc or based on the type of bank account [saving or current]
      parameters:
      - in: query
        name: dateOfOpening
        schema:
          type: string
          format: date
        required: false
      - in: query
        name: accountType
        schema:
          type: string
          enum: ["current","saving"]
        required: false
      responses:
        '200':
          description: the accounts data
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/CurrentAccount'
                    - $ref: '#/components/schemas/SavingAccount'
        '404':
          $ref: '#/components/responses/NotFound'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
          
      security:
      - api_key: []
      
    post:
      tags:
      - accounts 
      summary: create a bank account
      operationId: createBankAccount
      description: Calling this will allow epmployees to open an account for a specific customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CurrentAccount'
                - $ref: '#/components/schemas/SavingAccount'
      responses:
        '201':
          description: the account has been created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CurrentAccount'
                  - $ref: '#/components/schemas/SavingAccount'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
      
      security:
      - api_key: []
      
  /accounts/{userId}:
    get:
      tags:
      - accounts 
      summary: get bank accounts of a specific user
      operationId: getBankAccount
      description: Calling this will allow both customer and employee to check data of a specific account userId and filter them by bank account type
      parameters:
      - $ref: '#/components/parameters/userId'
      - in: query
        name: accountType
        schema:
          type: string
          enum: ["current","saving"]
        required: false
      responses:
        '200':
          description: the account data
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/CurrentAccount'
                    - $ref: '#/components/schemas/SavingAccount'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
          
  /accounts/{accountNumber}:
    delete:
      tags:
      - accounts 
      summary: close a bank account
      operationId: closeBankAccount
      description: Calling this will allow an employee to close a specific bank account
      parameters:
      - in: path
        name: accountNumber
        required: true
        description: the account number
        schema:
          type: string
      responses:
        '204':
          description: the bank account has successfully been closed
        '400': 
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401': 
          $ref: '#/components/responses/Unauthorized'
      
      security:
      - api_key: []
      
  /transactions:
    get:
      tags:
      - transactions
      summary: retrieves all transactions which has been made from a user's account.
      operationId: getTransactionHistory
      description: This function will retrieve the transaction acitivities of one account. The user will have the option to filter the transaction activities by using dates.
      parameters:
      - in: query
        name: accountNumber
        schema:
          type: string
        required: true
      - in: query
        name: dateFrom
        schema:
          type: string
          format: date
        required: false
      - in: query
        name: dateTo
        schema:
          type: string
          format: date
        required: false
      responses:
        '200':
          description: Transaction history has succesfully been retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '400': 
          $ref: '#/components/responses/BadRequest'
          
    post: 
      tags: 
        - transactions
      operationId: createTransaction
      summary: transfer/withdar/depoit money 
      description: Calling this will allow a user/employee to transfer/withdar/depoit money
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
            encoding:
              Transaction:
                style: form
                explode: true
      responses:
        '201':
          description: Transaction has successfully been send.
        '400': 
          $ref: '#/components/responses/BadRequest'
        '403':
          description: Insufficient balance.
    
components:
  schemas:
    User:
      type: object
      required:
        - id
        - officialName
        - dateOfBirth
        - primaryAddress
        - mobileNumber
        - emailAddress
        - commercialMessages
      properties:
        id:
          type: integer
        officialName:
          type: string
        preferedName:
          type: string
        sex:
          type: string
          enum: [male, female]
        dateOfBirth:
          type: string
        primaryAddress:
          $ref: '#/components/schemas/Address'
        postAddress:
          $ref: '#/components/schemas/Address'
        mobileNumber:
          type: string
        emailAddress:
          type: string
        commrcialMessages:
          type: string
          enum: [by post, by bankmail, by telephone, by email]
        preferedLanguage:
          type: string
          enum: 
            - Dutch 
            - English
    Customer:
      allOf:    
        - $ref: '#/components/schemas/User'
          
    Employee:
      allOf:    
        - $ref: '#/components/schemas/User'
      properties:
        jobPosition:
          type: string
            
    Address:
      type: object
      properties:
        street:
          type: string
        houseNumber:
          type: integer
        postCode:
          type: string
        city:
          type: string
        country:
          type: string
          
    Account:
      type: object
      required:
        - dateOfOpening
        - userId
        - accountType
      properties:
        accountNumber:
          type: string
        balance:
          type: number
          format: float
        dateOfOpening:
          type: string
        userId:
          type: integer
        currency:
          type: string
        accountType: 
          type: string
          enum: ["current","saving"]
        accountStatus:
          type: string
          enum: ["opened", "closed"]
          default: "opened"
          
    CurrentAccount:
      allOf:
        - $ref: '#/components/schemas/Account'
    SavingAccount:
      allOf:
        - $ref: '#/components/schemas/Account'
      properties:
        interestRate:
          type: number
          format: float
          
    Login:
      type: object
      required:
        - userId
        - userName
        - password
      properties:
        userId:
          type: integer
        userName:
          type: string
        password:
          type: string
       
    Transaction:
      type: object
      required:
      - transaction_id
      - amount
      - userPerforming
      - timestamp
      - transactionType
      properties:
        transaction_id:
          type: integer
        accountFrom:
          type: string
        accountTo:
          type: string
        amount:
          type: number
          format: float
          minimum: 1
          maximum: 10000
        userPerforming:
          type: string
        timestamp:
          type: string
          format: date-time
        transactionStatus:
          type: string
          enum:
          - pending
          - successful
          - failed
          default: pending
        transactionType:
          type: string
          enum:
          - transaction
          - withdraw
          - deposit
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
        
  parameters:
    userId:
      in: path
      name: userId
      required: true
      description: The id of the user to return
      schema:
        type: integer
        format: int64
        minimum: 1
        
  responses: 
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  
  securitySchemes:
    api_key:
      type: apiKey
      name: x-authtoken
      in: header
